<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context" xmlns:p="http://www.springframework.org/schema/p"
       xmlns:mvc="http://www.springframework.org/schema/mvc"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd">


    <!-- 扫描包下所有标注@Controller的组件 -->
    <context:component-scan base-package="api.controller"/>
    <!--扫描切面-->
    <context:component-scan base-package="api.exception"/>

    <!-- 视图解析器 -->
    <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver"
          p:prefix="/WEB-INF/jsp/"
          p:suffix=".jsp" />

    <!-- 配置注解驱动 -->
    <mvc:annotation-driven />
    <!-- 处理静态资源 -->
    <mvc:default-servlet-handler/>

    <!--配置验证码生成器-->
    <bean id="producer" class="com.google.code.kaptcha.impl.DefaultKaptcha" scope="singleton">
        <property name="config">
            <bean class="com.google.code.kaptcha.util.Config">
                <constructor-arg>
                    <props>
                        <prop key="kaptcha.border">no</prop>
                        <prop key="kaptcha.textproducer.font.color">black</prop>
                        <prop key="kaptcha.textproducer.char.length">5</prop>
                    </props>
                </constructor-arg>
            </bean>
        </property>
    </bean>

    <!--&lt;!&ndash;用于启用shiro注解配置，这个必须要配置到springmvc-servlet.xml的中，要保证最后执行，否则会因为参数缺失而配置出错&ndash;&gt;-->
    <!--&lt;!&ndash; 保证实现了Shiro内部lifecycle函数的bean执行 &ndash;&gt;-->
    <!--<bean id="lifecycleBeanPostProcessor" class="org.apache.shiro.spring.LifecycleBeanPostProcessor"/>-->

    <!--&lt;!&ndash; 开启Shiro的注解(如@RequiresRoles,@RequiresPermissions),需借助SpringAOP扫描使用Shiro注解的类,并在必要时进行安全逻辑验证 &ndash;&gt;-->
    <!--&lt;!&ndash; 配置以下两个bean即可实现此功能 &ndash;&gt;-->
    <!--&lt;!&ndash; Enable Shiro Annotations for Spring-configured beans. Only run after the lifecycleBeanProcessor has run &ndash;&gt;-->
    <!--&lt;!&ndash; 由于本例中并未使用Shiro注解,故注释掉这两个bean(个人觉得将权限通过注解的方式硬编码在程序中,查看起来不是很方便,没必要使用) &ndash;&gt;-->
    <!--&lt;!&ndash;   &ndash;&gt;-->
    <!--<bean class="org.springframework.aop.framework.autoproxy.DefaultAdvisorAutoProxyCreator" depends-on="lifecycleBeanPostProcessor"/>-->
    <!--<bean class="org.apache.shiro.spring.security.interceptor.AuthorizationAttributeSourceAdvisor">-->
        <!--<property name="securityManager" ref="securityManager"/>-->
    <!--</bean>-->

</beans>