<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd">

    <!-- 缓存 -->
    <bean id="cacheManager" class="org.apache.shiro.cache.ehcache.EhCacheManager">
        <property name="cacheManagerConfigFile" value="classpath:ehcache.xml"/>
    </bean>

    <!-- 继承自AuthorizingRealm的自定义Realm,即指定Shiro验证用户登录的类为自定义的UserRealm.java -->
    <bean id="userRealm" class="api.realm.UserRealm"></bean>

    <!-- Shiro默认会使用Servlet容器的Session,可通过sessionMode属性来指定使用Shiro原生Session -->
    <!-- 即<property name="sessionMode" value="native"/>,详细说明见官方文档 -->
    <!-- 这里主要是设置自定义的单Realm应用,若有多个Realm,可使用'realms'属性代替 -->
    <bean id="securityManager" class="org.apache.shiro.web.mgt.DefaultWebSecurityManager">
        <property name="realm" ref="userRealm" />
        <!--value是秒，cookie.maxAge红没事儿，是idea的问题-->
        <property name="rememberMeManager.cookie.maxAge" value="60" />
        <property name="cacheManager" ref="cacheManager"/>
    </bean>

    <!--这里的id要和web.xml中的filter的name要一致-->
    <!-- Shiro主过滤器本身功能十分强大,其强大之处就在于它支持任何基于URL路径表达式的、自定义的过滤器的执行 -->
    <!-- Web应用中,Shiro可控制的Web请求必须经过Shiro主过滤器的拦截,Shiro对基于Spring的Web应用提供了完美的支持 -->
    <bean id="shiroFilter" class="org.apache.shiro.spring.web.ShiroFilterFactoryBean">

        <!-- Shiro的核心安全接口,这个属性是必须的 -->
        <property name="securityManager" ref="securityManager" />

        <!--登录页面-->
        <!-- 要求登录时的链接(可根据项目的URL进行替换),非必须的属性-->
        <!--当认证失败时默认会自动寻找Web工程根目录下的"/login.html"页面-->
        <property name="loginUrl" value="/login.html" />

        <!--登录成功的首页面-->
        <!-- 当认证成功后要跳转的连接 -->
        <property name="successUrl" value="/" />

        <!--授权失败的跳转链接-->
        <!-- 用户访问未对其授权的资源时,所显示的连接 -->
        <!-- 若想更明显的测试此属性可以修改它的值,如unauthorized.html -->
        <property name="unauthorizedUrl" value="/unauthorized.html" />

        <!-- Shiro连接约束配置,即过滤链的定义 -->
        <!-- 此处可配合这篇文章来理解各个过滤连的作用http://blog.csdn.net/jadyer/article/details/12172839 -->
        <!-- 下面value值的第一个'/'代表的路径是相对于HttpServletRequest.getContextPath()的值 -->
        <!-- anon：spring预定义的空过滤器，定义等于这个过滤器就意味着等号前面对应的资源都将放行-->
        <!-- authc：该过滤器下的页面必须验证后才能访问,它是Shiro内置的一个拦截器org.apache.shiro.web.filter.authc.FormAuthenticationFilter -->
        <property name="filterChainDefinitions">
        <value>

            <!--/**表示本文件夹及子文件全都过滤放行；/*表示只放行本文件，但不放行子文件，不要和前置处理器的表示鬼，则混淆-->
            /public/**=anon
            /api/sys/captcha.jpg=anon
            /login.html=anon
            /api/sys/login=anon

            <!--/**=authc-->

            <!--角色授权-->
            <!--当访问路径为/sys/user/list时，UserRealm会调用数据库user的角色信息，
            只有当用户的角色是admin时才能够访问，否则直接跳转未授权页面。
            roles是shiro的关键字-->
            <!--/sys/user/list=roles[admin]-->
            <!--/sys/**=roles[admin]-->
            <!--/file/**=roles[editor]-->

            <!--资源授权-->
            <!--当访问路径为/sys/user/list时，UserRealm会调用数据库user的perms信息，
            只有当用户的perms信息是sys:role:list时才能够访问，否则直接跳转未授权页面。
            perms是shiro的关键字-->
            <!--/sys/role/list=perms[sys:role:list]-->
            <!--&lt;!&ndash;资源授权测试：有保存权限&ndash;&gt;-->
            <!--/api/sys/saveSysMenu=perms[sys:menu:save]-->
            <!--&lt;!&ndash;资源授权测试：没有删除权限，删除不成功&ndash;&gt;-->
            /api/sys/deleteBatchByIdSysMenu=perms[sys:menu:buCunZaiCeShi]
            <!--/sys/**=perms[sys:*]-->
            <!--/schedule/**=perms[schedule:*]-->
            <!--当有remenberme功能时，要使用user过滤器，同时关掉/**=authc-->
            /**=user
        </value>
    </property>
    </bean>

</beans>